<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://vpnbrowser.github.io/news/article-85354.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Halo 开源项目学习（七）：缓存机制_在线工具</title>
        <meta name="description" content="基本介绍 我们知道，频繁操作数据库会降低服务器的系统性能，因此通常需要将频繁访问、更新的数据存入到缓存。Halo 项目也引入了缓存机制，且设置了多种实现方式，如自定义缓存、Redis、LevelDB " />
        <link rel="icon" href="/assets/website/img/vmess_node/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="VPN浏览器 推荐免费VPN节点订阅中文网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://vpnbrowser.github.io/news/article-85354.htm" />
    <meta property="og:site_name" content="VPN浏览器 推荐免费VPN节点订阅中文网" />
    <meta property="og:title" content="Halo 开源项目学习（七）：缓存机制_在线工具" />
    <meta property="og:image" content="https://vpnbrowser.github.io/uploads/20240804-1/afb4cbe8d27b9367224ce9dc83c504cb.webp" />
        <meta property="og:release_date" content="2025-03-31T08:41:10" />
    <meta property="og:updated_time" content="2025-03-31T08:41:10" />
        <meta property="og:description" content="基本介绍 我们知道，频繁操作数据库会降低服务器的系统性能，因此通常需要将频繁访问、更新的数据存入到缓存。Halo 项目也引入了缓存机制，且设置了多种实现方式，如自定义缓存、Redis、LevelDB " />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Halo 开源项目学习（七）：缓存机制_在线工具">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- google fonts -->
    <link href="//fonts.googleapis.com/css?family=Work+Sans:100,200,300,400,500,600,700,800,900&display=swap" rel="stylesheet">
    <!-- Template CSS -->
    <link rel="stylesheet" href="/assets/website/css/vmess_node/style-starter.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-V3ES7YX37P"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-V3ES7YX37P');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!--header-->
    <div class="w3l-top-header">
        <header id="site-header" class="fixed-top">
            <div class="container">
                <nav class="navbar navbar-expand-lg navbar-dark stroke">
                    <a class="navbar-brand" href="/">
                                        <span>VPN浏览器</span>
                                        </a>
                    <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                        <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                        </span>
                    </button>
                    <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                        <ul class="navbar-nav mx-auto">
                                                        <li class="nav-item">
                                <a class="nav-link" href="/">首页</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/free-nodes/">免费节点</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/news/">新闻资讯</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/client.htm">客户端</a>
                            </li>
                                                    </ul>
                    </div>
                </nav>
            </div>
        </header>
    </div>
    <!--/header-->
    <!-- breadcrum -->
    <section class="w3l-deal-breadcrum">
        <div class="breadcrum py-5">
            <div class="container">
                <h1>Halo 开源项目学习（七）：缓存机制_在线工具</h1>
                <p><a href="/">首页</a> &nbsp; / &nbsp; <a href="/news/">新闻资讯</a>  &nbsp; / &nbsp; 正文</p>
            </div>
        </div>
    </section>
    <!-- //breadcrum -->
        <!-- //stats -->
    <section class="w3l-index2 py-5" id="about">
        <div class="container py-lg-3">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="Clash Node官网订阅站" data-url="https://clashnode.github.io">
                  				  				  				<h2 id="基本介绍">基本介绍</h2> <p>我们知道，频繁操作数据库会降低服务器的系统性能，因此通常需要将频繁访问、更新的数据存入到缓存。Halo 项目也引入了缓存机制，且设置了多种实现方式，如自定义缓存、Redis、LevelDB 等，下面我们分析一下缓存机制的实现过程。</p> <h2 id="自定义缓存">自定义缓存</h2> <p><strong>1. 缓存的配置</strong></p> <p>由于数据在缓存中以键值对的形式存在，且不同类型的缓存系统定义的存储和读取等操作都大同小异，所以本文仅介绍项目中默认的自定义缓存。自定义缓存指的是作者自己编写的缓存，以 ConcurrentHashMap 作为容器，数据存储在服务器的内存中。在介绍自定义缓存之前，我们先看一下 Halo 缓存的体系图：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/55bcee155ef892f4332351d48ee1e9c8.jpg" alt="Halo 开源项目学习（七）：缓存机制_在线工具"></p> <blockquote> <p>本人使用的 Halo 1.4.13 版本中并未设置 Redis 缓存，上图来自 1.5.2 版本。</p> </blockquote> <p>可以看到，作者的设计思路是在上层的抽象类和接口中定义通用的操作方法，而具体的缓存容器、数据的存储以及读取方法则是在各个实现类中定义。如果希望修改缓存的类型，只需要在配置类 HaloProperties 中修改 cache 字段的值：</p> <pre><code class="language-java">@Bean @ConditionalOnMissingBean AbstractStringCacheStore stringCacheStore() {     AbstractStringCacheStore stringCacheStore;     // 根据 cache 字段的值选择具体的缓存类型     switch (haloProperties.getCache()) {         case "level":             stringCacheStore = new LevelCacheStore(this.haloProperties);             break;         case "redis":             stringCacheStore = new RedisCacheStore(stringRedisTemplate);             break;         case "memory":         default:             stringCacheStore = new InMemoryCacheStore();             break;     }     log.info("Halo cache store load impl : [{}]", stringCacheStore.getClass());     return stringCacheStore; }</code></pre> <blockquote> <p>上述代码来自 1.5.2 版本。</p> </blockquote> <p>cache 字段的默认值为 "memory"，因此缓存的实现类为 InMemoryCacheStore（自定义缓存）：</p> <pre><code class="language-java">public class InMemoryCacheStore extends AbstractStringCacheStore {      /**      * Cleaner schedule period. (ms)      */     private static final long PERIOD = 60 * 1000;      /**      * Cache container.      */     public static final ConcurrentHashMap&lt;String, CacheWrapper&lt;String&gt;&gt; CACHE_CONTAINER =         new ConcurrentHashMap&lt;&gt;();      private final Timer timer;      /**      * Lock.      */     private final Lock lock = new ReentrantLock();      public InMemoryCacheStore() {         // Run a cache store cleaner         timer = new Timer();         // 每 60s 清除一次过期的 key         timer.scheduleAtFixedRate(new CacheExpiryCleaner(), 0, PERIOD);     }     // 省略部分代码 }</code></pre> <p>InMemoryCacheStore 成员变量的含义如下：</p> <ol> <li>CACHE_CONTAINER 是 InMemoryCacheStore 的缓存容器，类型为 ConcurrentHashMap。使用 ConcurrentHashMap 是为了保证线程安全，因为缓存中会存放缓存锁相关的数据（下文中介绍），每当用户访问后台的服务时，就会有新的数据进入缓存，这些数据可能来自于不同的线程，因此 CACHE_CONTAINER 需要考虑多个线程同时操作的情况。</li> </ol> <ol start="2"> <li> <p>timer 负责执行周期任务，任务的执行频率为 PERIOD，默认为一分钟，周期任务的处理逻辑是清除缓存中已经过期的 key。</p> </li> <li> <p>lock 是 ReentrantLock 类型的排它锁，与缓存锁有关。</p> </li> </ol> <p><strong>2. 缓存中的数据</strong></p> <p>缓存中存储的数据包括：</p> <ol> <li> <p>系统设置中的选项信息，其实就是 options 表中存储的数据。</p> </li> <li> <p>已登录用户（博主）的 token。</p> </li> <li> <p>已获得文章授权的客户端的 sessionId。</p> </li> <li> <p>缓存锁相关的数据。</p> </li> </ol> <p>在之前的文章中，我们介绍过 token 和 sessionId 的存储和获取，因此本文就不再赘述这一部分内容了，详见<code>Halo 开源项目学习（三）：注册与登录</code> 和<code>Halo 开源项目学习（四）：发布文章与页面</code>。缓存锁我们在下一节再介绍，本节中我们先看看 Halo 如何保存 options 信息。</p> <p>首先需要了解一下 options 信息是什么时候存入到缓存中的，实际上，程序在启动后会发布 ApplicationStartedEvent 事件，项目中定义了负责监听 ApplicationStartedEvent 事件的监听器 StartedListener（listener 包下），该监听器在事件发布后会执行 initThemes 方法，下面是 initThemes 方法中的部分代码片段：</p> <pre><code class="language-java">private void initThemes() {     // Whether the blog has initialized     Boolean isInstalled = optionService         .getByPropertyOrDefault(PrimaryProperties.IS_INSTALLED, Boolean.class, false);     // 省略部分代码 }</code></pre> <p>该方法会调用 getByPropertyOrDefault 方法从缓存中查询博客的安装状态，我们从 getByPropertyOrDefault 方法开始，沿着调用链向下搜索，可以追踪到 OptionProvideService 接口中的 getByKey 方法：</p> <pre><code class="language-java">default Optional&lt;Object&gt; getByKey(@NonNull String key) {     Assert.hasText(key, "Option key must not be blank");     // 如果 val = listOptions().get(key) 不为空, 返回 value 为 val 的 Optional 对象, 否则返回 value 为空的 Optional 对象     return Optional.ofNullable(listOptions().get(key)); }</code></pre> <p>可以看到，重点是这个 listOptions 方法，该方法在 OptionServiceImpl 类中定义：</p> <pre><code class="language-java">public Map&lt;String, Object&gt; listOptions() {     // Get options from cache     // 从缓存 CACHE_CONTAINER 中获取 "options" 这个 key 对应的数据, 并将该数据转化为 Map 对象     return cacheStore.getAny(OPTIONS_KEY, Map.class).orElseGet(() -&gt; {         // 初次调用时需要从 options 表中获取所有的 Option 对象         List&lt;Option&gt; options = listAll();         // 所有 Option 对象的 key 集合         Set&lt;String&gt; keys = ServiceUtils.fetchProperty(options, Option::getKey);          /*             * options 表中存储的记录其实就是用户自定义的 Option 选项, 当用户修改博客设置时, 会自动更新 options 表,             * Halo 中对一些选项的 value 设置了确定的类型, 例如 EmailProperties 这个类中的 HOST 为 String 类型, 而             * SSL_PORT 则为 Integer 类型, 由于 Option 类中 value 一律为 String 类型, 因此需要将某些 value 转化为指             * 定的类型             */         Map&lt;String, Object&gt; userDefinedOptionMap =             ServiceUtils.convertToMap(options, Option::getKey, option -&gt; {                 String key = option.getKey();                  PropertyEnum propertyEnum = propertyEnumMap.get(key);                  if (propertyEnum == null) {                     return option.getValue();                 }                 // 对 value 进行类型转换                 return PropertyEnum.convertTo(option.getValue(), propertyEnum);             });          Map&lt;String, Object&gt; result = new HashMap&lt;&gt;(userDefinedOptionMap);          // Add default property         /*             * 有些选项是 Halo 默认设定的, 例如 EmailProperties 中的 SSL_PORT, 用户未设置时, 它也会被设定为默认的 465,             * 同样, 也需要将默认的 "465" 转化为 Integer 类型的 465             */         propertyEnumMap.keySet()             .stream()             .filter(key -&gt; !keys.contains(key))             .forEach(key -&gt; {                 PropertyEnum propertyEnum = propertyEnumMap.get(key);                  if (StringUtils.isBlank(propertyEnum.defaultValue())) {                     return;                 }                 // 对 value 进行类型转换并存入 result                 result.put(key,                     PropertyEnum.convertTo(propertyEnum.defaultValue(), propertyEnum));             });          // Cache the result         // 将所有的选项加入缓存         cacheStore.putAny(OPTIONS_KEY, result);          return result;     }); }</code></pre> <p>服务器首先从 CACHE_CONTAINER 中获取 "options" 这个 key 对应的数据，然后将该数据转化为 Map 类型的对象。由于初次查询时 CACHE_CONTAINER 中 并没有 "options" 对应的 value，因此需要进行初始化：</p> <ol> <li> <p>首先从 options 表中获取所有的 Option 对象，并将这些对象存入到 Map 中。其中 key 和 value 均为 Option 对象中的 key 和 value，但 value 还需要进行一个类型转换，因为在 Option 类中 value 被定义为了 String 类型。例如，"is_installed" 对应的 value 为 "true"，为了能够正常使用 value，需要将字符串 "true" 转化成 Boolean 类型的 true。结合上下文，我们发现程序是根据 PrimaryProperties 类（继承 PropertyEnum 的枚举类）中定义的枚举对象<code>IS_INSTALLED("is_installed", Boolean.class, "false")</code> 来确认目标类型 Boolean 的。</p> </li> <li> <p>options 表中的选项是用户自定义的选项，除此之外，Halo 中还设置了一些默认的选项，这些选项均在 PropertyEnum 的子类中定义，例如 EmailProperties 类中的<code>SSL_PORT("email_ssl_port", Integer.class, "465")</code>，其对应的 key 为 "email_ssl_port"，value 为 "465"。服务器也会将这些 key - value 对存入到 Map，并对 value 进行类型转换。</p> </li> </ol> <p>以上便是 listOptions 方法的处理逻辑，我们回到 getByKey 方法，当获取到 listOptions 方法返回的 Map 对象后，服务器可以根据指定的 key（如 "is_installed"）获取到对应的属性值（如 true）。当用户在管理员后台修改博客的系统设置时，服务器会根据用户的配置更新 options 表，并发布 OptionUpdatedEvent 事件，之后负责处理事件的监听器会将缓存中的 "options" 删除，下次查询时再根据上述步骤执行初始化操作（详见 FreemarkerConfigAwareListener 中的 onOptionUpdate 方法）。</p> <p><strong>3. 缓存的过期处理</strong></p> <p>缓存的过期处理是一个非常重要的知识点，数据过期后，通常需要将其从缓存中删除。从上文中的 cacheStore.putAny(OPTIONS_KEY, result) 方法中我们得知，服务器将数据存储到缓存之前，会先将其封装成 CacheWrapper 对象：</p> <pre><code class="language-java">class CacheWrapper&lt;V&gt; implements Serializable {      /**      * Cache data      */     private V data;      /**      * Expired time.      */     private Date expireAt;      /**      * Create time.      */     private Date createAt; }</code></pre> <p>其中 data 是需要存储的数据，createAt 和 expireAt 分别是数据的创建时间和过期时间。Halo 项目中，"options" 是没有过期时间的，只有当数据更新时，监听器才会将旧的数据删除。需要注意的是，token 和 sessionId 均有过期时间，对于有过期时间的 key，项目中也有相应的处理办法。以 token 为例，拦截器拦截到用户的请求后会确认用户的身份，也就是查询缓存中是否具有 token 对应的用户 id，这个查询操作的底层调用的是 get 方法（在 AbstractCacheStore 类中定义）：</p> <pre><code class="language-java">public Optional&lt;V&gt; get(K key) {     Assert.notNull(key, "Cache key must not be blank");      return getInternal(key).map(cacheWrapper -&gt; {         // Check expiration         // 过期         if (cacheWrapper.getExpireAt() != null             &amp;&amp; cacheWrapper.getExpireAt().before(run.halo.app.utils.DateUtils.now())) {             // Expired then delete it             log.warn("Cache key: [{}] has been expired", key);              // Delete the key             delete(key);              // Return null             return null;         }         // 未过期返回缓存数据         return cacheWrapper.getData();     }); }</code></pre> <p>服务器获取到 key 对应的 CacheWrapper 对象后，会检查其中的过期时间，如果数据已过期，那么直接将其删除并返回 null。另外，上文中提到，timer（InMemoryCacheStore 的成员变量）的周期任务也负责删除过期的数据，下面是 timer 周期任务执行的方法：</p> <pre><code class="language-java">private class CacheExpiryCleaner extends TimerTask {      @Override     public void run() {         CACHE_CONTAINER.keySet().forEach(key -&gt; {             if (!InMemoryCacheStore.this.get(key).isPresent()) {                 log.debug("Deleted the cache: [{}] for expiration", key);             }         });     } }</code></pre> <p>可见，周期任务也是通过调用 get 方法来删除过期数据的。</p> <h2 id="缓存锁">缓存锁</h2> <p>Halo 项目中的缓存锁也是一个比较有意思的模块，其作用是限制用户对某个功能的调用频率，可认为是对请求的方法进行加锁。缓存锁主要利用自定义注解 @CacheLock 和 AOP 来实现，@CacheLock 注解的定义如下：</p> <pre><code class="language-java">@Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) @Documented @Inherited public @interface CacheLock {      @AliasFor("value")     String prefix() default "";       @AliasFor("prefix")     String value() default "";       long expired() default 5;       TimeUnit timeUnit() default TimeUnit.SECONDS;       String delimiter() default ":";       boolean autoDelete() default true;       boolean traceRequest() default false; }</code></pre> <p>各个成员变量的含义为：</p> <ul> <li> <p>prefix：用于构建 cacheLockKey（一个字符串）的前缀。</p> </li> <li> <p>value：同 prefix。</p> </li> <li> <p>expired：缓存锁的持续时间。</p> </li> <li> <p>timeUnit：持续时间的单位。</p> </li> <li> <p>delimiter：分隔符，构建 cacheLockKey 时使用。</p> </li> <li> <p>autoDelete：是否自动删除缓存锁。</p> </li> <li> <p>traceRequest：是否追踪请求的 IP，如果是，那么构建 cacheLockKey 时会添加用户的 IP。</p> </li> </ul> <p>缓存锁的使用方法是在需要加锁的方法上添加 @CacheLock 注解，然后通过 Spring 的 AOP 在方法执行前对方法进行加锁，方法执行结束后再将锁取消。项目中的切面类为 CacheLockInterceptor，负责加/解锁的逻辑如下：</p> <pre><code class="language-java">Around("@annotation(run.halo.app.cache.lock.CacheLock)") public Object interceptCacheLock(ProceedingJoinPoint joinPoint) throws Throwable {     // 获取方法签名     // Get method signature     MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();      log.debug("Starting locking: [{}]", methodSignature.toString());      // 获取方法上的 CacheLock 注解     // Get cache lock     CacheLock cacheLock = methodSignature.getMethod().getAnnotation(CacheLock.class);     // 构造缓存锁的 key     // Build cache lock key     String cacheLockKey = buildCacheLockKey(cacheLock, joinPoint);     System.out.println(cacheLockKey);     log.debug("Built lock key: [{}]", cacheLockKey);      try {         // Get from cache         Boolean cacheResult = cacheStore             .putIfAbsent(cacheLockKey, CACHE_LOCK_VALUE, cacheLock.expired(),                 cacheLock.timeUnit());          if (cacheResult == null) {             throw new ServiceException("Unknown reason of cache " + cacheLockKey)                 .setErrorData(cacheLockKey);         }          if (!cacheResult) {             throw new FrequentAccessException("访问过于频繁，请稍后再试！").setErrorData(cacheLockKey);         }         // 执行注解修饰的方法         // Proceed the method         return joinPoint.proceed();     } finally {         // 方法执行结束后, 是否自动删除缓存锁         // Delete the cache         if (cacheLock.autoDelete()) {             cacheStore.delete(cacheLockKey);             log.debug("Deleted the cache lock: [{}]", cacheLock);         }     } }</code></pre> <p><code>@Around("@annotation(run.halo.app.cache.lock.CacheLock)")</code> 表示，如果请求的方法被 @CacheLock 注解修饰，那么服务器不会执行该方法，而是执行 interceptCacheLock 方法：</p> <ol> <li> <p>获取方法上的 CacheLock 注解并构建 cacheLockKey。</p> </li> <li> <p>查看缓存中是否存在 cacheLockKey，如果存在，那么抛出异常，提醒用户访问过于频繁。如果不存在，那么将 cacheLockKey 存入到缓存（有效时间为 expired），并执行请求的方法。</p> </li> <li> <p>如果 CacheLock 注解中的 autoDelete 为 true，那么方法执行结束后立即删除 cacheLockKey。</p> </li> </ol> <p>缓存锁的原理和 Redis 的<code>setnx + expire</code> 相似，如果 key 已存在，就不能再次添加。下面是构建 cacheLockKey 的逻辑：</p> <pre><code class="language-java">private String buildCacheLockKey(@NonNull CacheLock cacheLock,     @NonNull ProceedingJoinPoint joinPoint) {     Assert.notNull(cacheLock, "Cache lock must not be null");     Assert.notNull(joinPoint, "Proceeding join point must not be null");      // Get the method     MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();      // key 的前缀     // Build the cache lock key     StringBuilder cacheKeyBuilder = new StringBuilder(CACHE_LOCK_PREFIX);     // 分隔符     String delimiter = cacheLock.delimiter();     // 如果 CacheLock 中设置了前缀, 那么直接使用该前缀, 否则使用方法名     if (StringUtils.isNotBlank(cacheLock.prefix())) {         cacheKeyBuilder.append(cacheLock.prefix());     } else {         cacheKeyBuilder.append(methodSignature.getMethod().toString());     }     // 提取被 CacheParam 注解修饰的变量的值     // Handle cache lock key building     Annotation[][] parameterAnnotations = methodSignature.getMethod().getParameterAnnotations();      for (int i = 0; i &lt; parameterAnnotations.length; i++) {         log.debug("Parameter annotation[{}] = {}", i, parameterAnnotations[i]);          for (int j = 0; j &lt; parameterAnnotations[i].length; j++) {             Annotation annotation = parameterAnnotations[i][j];             log.debug("Parameter annotation[{}][{}]: {}", i, j, annotation);             if (annotation instanceof CacheParam) {                 // Get current argument                 Object arg = joinPoint.getArgs()[i];                 log.debug("Cache param args: [{}]", arg);                  // Append to the cache key                 cacheKeyBuilder.append(delimiter).append(arg.toString());             }         }     }     // 是否添加请求的 IP     if (cacheLock.traceRequest()) {         // Append http request info         cacheKeyBuilder.append(delimiter).append(ServletUtils.getRequestIp());     }     return cacheKeyBuilder.toString(); }</code></pre> <p>可以发现，cacheLockKey 的结构为<code>cache_lock_</code> +<code>CacheLock 注解中设置的前缀或方法签名</code> +<code>分隔符</code> +<code>CacheParam 注解修饰的参数的值</code> +<code>分隔符</code> +<code>请求的 IP</code>，例如：</p> <pre><code class="language-bash">cache_lock_public void run.halo.app.controller.content.api.PostController.like(java.lang.Integer):1:127.0.0.1</code></pre> <p>CacheParam 同 CacheLock 一样，都是为实现缓存锁而定义的注解。CacheParam 的作用是将锁的粒度精确到具体的实体，如点赞请求：</p> <pre><code class="language-java">@PostMapping("{postId:\\d+}/likes") @ApiOperation("Likes a post") @CacheLock(autoDelete = false, traceRequest = true) public void like(@PathVariable("postId") @CacheParam Integer postId) {     postService.increaseLike(postId); }</code></pre> <p>参数 postId 被 CacheParam 修饰，根据 buildCacheLockKey 方法的逻辑，postId 也将是 cacheLockKey 的一部分，这样锁定的就是 "为 id 等于 postId 的文章点赞" 这一方法，而非锁定 "点赞" 方法。</p> <p>此外，CacheLock 注解中的 traceRequest 参数也很重要，如果 traceRequest 为 true，那么请求的 IP 会被添加到 cacheLockKey 中，此时缓存锁仅限制同一 IP 对某个方法的请求频率，不同 IP 之间互不干扰。如果 traceRequest 为 false，那么缓存锁就是一个分布式锁，不同 IP 不能同时访问同一个功能，例如当某个用户为某篇文章点赞后，短时间内其它用户不能为该文章点赞。</p> <p>最后我们再分析一下 putIfAbsent 方法（在 interceptCacheLock 中被调用），其功能和 Redis 的 setnx 相似，该方法的具体处理逻辑可追踪到 InMemoryCacheStore 类中的 putInternalIfAbsent 方法：</p> <pre><code class="language-java">Boolean putInternalIfAbsent(@NonNull String key, @NonNull CacheWrapper&lt;String&gt; cacheWrapper) {     Assert.hasText(key, "Cache key must not be blank");     Assert.notNull(cacheWrapper, "Cache wrapper must not be null");      log.debug("Preparing to put key: [{}], value: [{}]", key, cacheWrapper);     // 加锁     lock.lock();     try {         // 获取 key 对应的 value         // Get the value before         Optional&lt;String&gt; valueOptional = get(key);         // value 不为空返回 false         if (valueOptional.isPresent()) {             log.warn("Failed to put the cache, because the key: [{}] has been present already",                 key);             return false;         }         // 在缓存中添加 value 并返回 true         // Put the cache wrapper         putInternal(key, cacheWrapper);         log.debug("Put successfully");         return true;     } finally {         // 解锁         lock.unlock();     } }</code></pre> <p>上节中我们提到，自定义缓存 InMemoryCacheStore 中有一个 ReentrantLock 类型的成员变量 lock，lock 的作用就是保证 putInternalIfAbsent 方法的线程安全性，因为向缓存容器中添加 cacheLockKey 是多个线程并行执行的。如果不添加 lock，那么当多个线程同时操作同一个 cacheLockKey 时，不同线程可能都会检测到缓存中没有 cacheLockKey，因此 putInternalIfAbsent 方法均返回 true，之后多个线程就可以同时执行某个方法，添加 lock 后就能够避免这种情况。</p> <p><strong>结语</strong></p> <p>关于 Halo 项目缓存机制就介绍到这里了，如有理解错误，欢迎大家批评指正 ( ̳• ◡ • ̳)。</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-84654.htm">天津宠物猫领养中心地址在哪里（天津宠物猫领养中心地址在哪里呀）</a></p>
                                        <p>下一个：<a href="/news/article-85355.htm">厦门哪里有小狗领养（厦门哪里有收养狗狗的收容中心）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-3-27-clash-v2ray-ss-ssr.htm" title="VPN浏览器 | 3月27日22.6M/S|免费Clash/V2ray/Shadowrocket/SSR订阅节点地址">VPN浏览器 | 3月27日22.6M/S|免费Clash/V2ray/Shadowrocket/SSR订阅节点地址</a></li>
                        <li class="py-2"><a href="/news/article-77682.htm" title="扬州宠物医院营业时间表（扬州宠物医院营业时间表电话）">扬州宠物医院营业时间表（扬州宠物医院营业时间表电话）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-29-free-subscribe-node.htm" title="VPN浏览器 | 3月29日22.3M/S|免费Clash/SSR/Shadowrocket/V2ray订阅节点地址">VPN浏览器 | 3月29日22.3M/S|免费Clash/SSR/Shadowrocket/V2ray订阅节点地址</a></li>
                        <li class="py-2"><a href="/news/article-74980.htm" title="凭什么猫不能打新猫（凭什么猫不能打新猫呢）">凭什么猫不能打新猫（凭什么猫不能打新猫呢）</a></li>
                        <li class="py-2"><a href="/news/article-75661.htm" title="养猫的人容易得什么病十年后会死（养猫会得什么病会致死吗）">养猫的人容易得什么病十年后会死（养猫会得什么病会致死吗）</a></li>
                        <li class="py-2"><a href="/news/article-85355.htm" title="厦门哪里有小狗领养（厦门哪里有收养狗狗的收容中心）">厦门哪里有小狗领养（厦门哪里有收养狗狗的收容中心）</a></li>
                        <li class="py-2"><a href="/news/article-78378.htm" title="利用 onnxruntime 库同时推理多个模型的效率研究">利用 onnxruntime 库同时推理多个模型的效率研究</a></li>
                        <li class="py-2"><a href="/news/article-81139.htm" title="动物医院的接诊流程（动物医院的设计,接诊流程,仪器设备）">动物医院的接诊流程（动物医院的设计,接诊流程,仪器设备）</a></li>
                        <li class="py-2"><a href="/news/article-86080.htm" title="机器制作狗粮的配方大全图片（机器制作狗粮的配方大全图片高清）">机器制作狗粮的配方大全图片（机器制作狗粮的配方大全图片高清）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-16-free-v2ray.htm" title="VPN浏览器 | 3月16日19.3M/S|免费Shadowrocket/SSR/V2ray/Clash订阅节点地址">VPN浏览器 | 3月16日19.3M/S|免费Shadowrocket/SSR/V2ray/Clash订阅节点地址</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <style>
    .video-heading {
        max-width: 750px;
        margin: 0 auto;
    }

    .video-heading h3 {
        font-size: 60px;
        opacity: 0.8;
        line-height: 58px;
        font-weight: 300;
        text-transform: capitalize;
        color: #fff;
    }

    .video-responsive {
        padding-bottom: 600px;
        position: relative;
        width: 100%;
    }

    .canvas,
    .video {
        left: 0;
        position: absolute;
        top: 0;
        background: #000;
        z-index: 5;
        overflow: hidden;
        width: 100%;
        height: 600px;
        object-fit: cover;
    }

    #over_video {
        position: absolute;
        width: 100%;
        height: 100%;
        text-align: center;
        top: 0;
        z-index: 10;
        color: #FFF;
    }

    .bg-mask {
        background: rgba(0, 0, 0, 0.3);
        height: inherit;
        display: grid;
        align-items: center;
        padding: 0 15px;
    }

    @media screen and (max-width: 568px) {

        .canvas,
        .video {
            height: 400px;
        }

        .video-responsive {
            padding-bottom: 400px;
        }


        .video-heading h3 {
            font-size: 35px;
            line-height: 48px;
            margin-bottom: 20px;
        }
    }
    </style>
    <script src="/assets/website/js/frontend/vmess_node/canvas-video-player.js"></script>
    <script>
    var isIOS = /iPad|iPhone|iPod/.test(navigator.platform);

    if (isIOS) {

        var canvasVideo = new CanvasVideoPlayer({
            videoSelector: '.video',
            canvasSelector: '.canvas',
            timelineSelector: false,
            autoplay: true,
            makeLoop: true,
            pauseOnClick: false,
            audio: false
        });

    } else {

        // Use HTML5 video
        document.querySelectorAll('.canvas')[0].style.display = 'none';

    }
    </script>
    <!-- scripts -->
    <footer>
        <!-- footer -->
        <section class="w3l-footer">
            <div class="w3l-footer-16-main py-5">
                <div class="container">
                    <div class="d-flex below-section justify-content-between align-items-center pt-4 mt-5">
                        <div class="columns text-lg-left text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                            <p>VPN浏览器 推荐免费VPN节点订阅中文网 版权所有 Powered by WordPress
                            </p>
                        </div>
                        <div class="columns-2 mt-lg-0 mt-3">
                            <ul class="social">
                                <li><a href="#facebook"><span class="fa fa-facebook" aria-hidden="true"></span></a>
                                </li>
                                <li><a href="#linkedin"><span class="fa fa-linkedin" aria-hidden="true"></span></a>
                                </li>
                                <li><a href="#twitter"><span class="fa fa-twitter" aria-hidden="true"></span></a>
                                </li>
                                <li><a href="#google"><span class="fa fa-google-plus" aria-hidden="true"></span></a>
                                </li>
                                <li><a href="#github"><span class="fa fa-github" aria-hidden="true"></span></a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            <!-- move top -->
            <button onclick="topFunction()" id="movetop" title="Go to top">
                <span class="fa fa-angle-up"></span>
            </button>
            <script>
            // When the user scrolls down 20px from the top of the document, show the button
            window.onscroll = function() {
                scrollFunction()
            };

            function scrollFunction() {
                if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                    document.getElementById("movetop").style.display = "block";
                } else {
                    document.getElementById("movetop").style.display = "none";
                }
            }

            // When the user clicks on the button, scroll to the top of the document
            function topFunction() {
                document.body.scrollTop = 0;
                document.documentElement.scrollTop = 0;
            }
            </script>
            <!-- //move top -->
            <script>
            $(function() {
                $('.navbar-toggler').click(function() {
                    $('body').toggleClass('noscroll');
                })
            });
            </script>
        </section>
        <!-- //footer -->
    </footer>
    <!-- jQuery -->
    <script src="/assets/website/js/frontend/vmess_node/jquery-3.5.1.min.js"></script>
    <!-- Template JavaScript -->
    <!-- stats number counter-->
    <script src="/assets/website/js/frontend/vmess_node/jquery.waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/vmess_node/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <script src="/assets/website/js/frontend/vmess_node/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <script src="/assets/website/js/frontend/vmess_node/owl.carousel.js"></script>
    <!-- testimonials for owlcarousel -->
    <script>
    $(document).ready(function() {
        $('.owl-one').owlCarousel({
            loop: true,
            margin: 0,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                667: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 1,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //testimonials script for owlcarousel -->
    <!-- for blog carousel slider -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            stagePadding: 20,
            margin: 15,
            nav: false,
            loop: false,
            responsive: {
                0: {
                    items: 1
                },
                600: {
                    items: 2
                },
                1000: {
                    items: 3
                }
            }
        })
    })
    </script>
    <!-- //for blog carousel slider -->
    <script>
    var lFollowX = 0,
        lFollowY = 0,
        x = 0,
        y = 0,
        friction = 1 / 30;

    function animate() {
        x += (lFollowX - x) * friction;
        y += (lFollowY - y) * friction;

        translate = 'translate(' + x + 'px, ' + y + 'px) scale(1.1)';

        $('.banner-image').css({
            '-webit-transform': translate,
            '-moz-transform': translate,
            'transform': translate
        });

        window.requestAnimationFrame(animate);
    }

    $(window).on('mousemove click', function(e) {

        var lMouseX = Math.max(-100, Math.min(100, $(window).width() / 2 - e.clientX));
        var lMouseY = Math.max(-100, Math.min(100, $(window).height() / 2 - e.clientY));
        lFollowX = (20 * lMouseX) / 100; // 100 : 12 = lMouxeX : lFollow
        lFollowY = (10 * lMouseY) / 100;

    });

    animate();
    </script>
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- Bootstrap JS -->
    <script src="/assets/website/js/frontend/vmess_node/bootstrap.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>